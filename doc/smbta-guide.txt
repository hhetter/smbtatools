The SMB Traffic Analyzer Guide
==============================
Holger Hetterich <ozzy@metal-district.de>
v1.0, Oct 2010

What is SMB Traffic Analyzer
----------------------------

*SMB Traffic Analyzer* (from now on called *SMBTA*) is a software suite utilizing
the *Samba* CIFS server to create statistics about the data traffic on a Samba
network. SMBTA is made out of several components:

- a module in the *VFS* (Virtual File System) Layer of Samba
- a system daemon program
- two user oriented programs to visualize the statistics

SMBTA is utilizing a *SQL* storage to store data about the traffic caused on a
network. By making this data available via SQL, SMBTA is helpful for many
system administrators.

Having knowledge of SQL is not required. The user may also run the client programs
to query the database. These are specialized to the organization of the database,
and are taking away much of the work to translate often needed questions into SQL
statements from the user. They are also running networked, and can be run on a
complete different system where the SQL storage exists.

The basic idea and main concept of SMBTA was born on the *SambaXP* conference
in GÃ¶ttingen, Germany, in 2007. At the SNIA conference 2008, I was able to
present a prototype of the idea to the Samba team. The code for the module
got immediately accepted and was introduced with Samba 3.2.0 to Samba users.

This document is refering to the version 2.0 of the SMB Traffic Analyzer VFS
module.

Please check SMB Traffic Analyzer's home page for newer versions of the software or
this document:
http://holger123.wordpress.com/smb-traffic-analyzer/

Why using SMB Traffic Analyzer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Samba services may run on special hardware, like RAID systems, or other specialized
storage. With SMBTA, the user can create an overview of the network usage
on the network. SMBTA can be used to answer questions like this:

- Which of my services is the most used one?
- At which time the usage of my service reaches peaks?
- Which service almost never gets used?
- Which users are the highest traffic generators?
- What where the detailed last file activities on a share?
- Which is the top used file by read and write access?

Isn't SMBTA a tool to control employees?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes it can be used like that, but doesn't need to be. To expose user names
to a storage is even forbidden in many countries. Therefore, SMBTA allows
for anonymization of any data linked to a person.

There are many use cases for SMBTA, like determining and planning hardware for your
services, or analyzing the network before switching to clustered Samba.

The basic concept of SMBTA
~~~~~~~~~~~~~~~~~~~~~~~~~~

The Samba CIFS server features a Virtual File System Layer (VFS), that allows
modules to be linked into the layer, replacing or enhancing the functions
of the VFS. Modules can be linked into and behave completely transparent.

SMBTA makes use of this functionality by adding a module to Samba's
VFS. In the VFS layer, the module is collecting data from prominent VFS functions like write, read,
close etc. 

The collected data may be be encrypted, and send over the network to a
receiver program. This daemon program, smbtad, is then building a
SQL storage from the data.

Besides of the generated SQL storage, client programs can be used to
query the storage in a specialized way over the network.


Where to get SMBTA
~~~~~~~~~~~~~~~~~~

The SMBTA VFS module is called vfs_smb_traffic_analyzer.so, and is packaged
with Samba version greater or equal than 3.2.0. However, the current
SMBTA module shipping with Samba is only implementing version 1 of the
SMBTA protocol, and this document is only refering to version 2 of the
protocol. The implementation of vfs_smb_traffic_analyzer.so protocol version 2
can be found in the current master git source tree of Samba. It is expected
to be shipped with Samba 3.6.0.

For the openSUSE Linux distribution, SMBTAv2 has been backported to current
Samba releases, from 3.5.0 and newer. You can retrieve the SMBTAv2 VFS module
from the openSUSE BuildService.

The other parts of SMBTA, the daemon program smbtad, as well as the client
programs smbtaquery and smbtamonitor are available in source code from
the projects homepage at http://holger123.wordpress.com/smb-traffic-analyzer/.
For the openSUSE Linux distribution, RPM packages are available from the 
openSUSE Build Service.


Building SMBTA from the sources
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The SMBTA tools smbtaquery and smbtamonitor are utilizing "cmake" as the primary build tool. The smbtad daemon program does too.

Before trying to build smbtad and smbtatools, check for the following requirements:

- cmake ( *required for both* )
- sqlite >= 3.7.0 ( *required for smbtad* )
- libsmbclient library ( *required for smbtautils* )
- iniparser (libiniparser) ( *required for both* )
- ncurses library ( *required for smbtautils* )

With cmake, you usually do an "out-of-source" build. That means that the source will not be build in the original source directory. Here is an example build. Suppose you've unpacked the smbtatools source tarball at:
--------------------
/home/tom/smbtatools
--------------------

You can now create your own directory where you want to build smbtatools. Like:
---------------------------------
mkdir /home/tom/smbtatools-build
cd /home/tom/smbtatools-build
---------------------------------

You are now in the build directory. Just run cmake from here:
---------------------------------
cmake ../smbtatools/
---------------------------------

And cmake will check the requirements of smbtatools/smbtad against your system. If it complains, it will return human readable messages about what is missing. After a successful cmake run, you can just do "make" and "make install" as "usual" in this directory.

-----------------------------------
make
make install (as superuser)
------------------------------------

Setting up SMBTA
----------------

Activating the VFS module on Samba Servers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In general, the Samba CIFS server is configured via smb.conf, it's main
configuration file. A typical service definition would look like this:

---------------------------------------
[ExampleShare]
	path = /space
	read only = no
---------------------------------------

Defining the share "ExampleShare" as a CIFS service, refering to the
path /space on the servers storage.

By extending the share definition with the commands to load the SMBTA
VFS module, SMBTA logging for this service can be activated:

---------------------------------------
[ExampleShare]
	path = /space
	read only = no
        vfs objects = smb_traffic_analyzer
        smb_traffic_analyzer:protocol_version = V2
        smb_traffic_analyzer:host = localhost
        smb_traffic_analyzer:port = 3490
----------------------------------------

By default, SMBTA will use protocol version 1, to not break any existing
installations. Only if the version parameter is given, it will be forced to
use protocol version 2.

The host and port parameters define the hostname of the system that will be
used as the target for the VFS modules data to send. It will try to connect
to the port number given with the parameter port.

Setting up smbtad
~~~~~~~~~~~~~~~~~

On the target host of the module, the program smbtad is running. It's task
is mainly to feed a SQL storage out of the data it receives from the module,
maintain the storage and accept requests from clients.

---------------------------------
smbtad -i 3490 -p 3491
---------------------------------

smbtad is a daemon program that can be run by any user. By default, it creates a directory $HOME/.smbtad/ where it stores it's database. The above call makes smbtad to listen to the VFS modules connections on port 3490, and listen to client connections on port 3491.

By default, smbtad creates a database as $HOME/.smbtad/staddb. If the database
already exists, it will use the existing database.

The command line options of smbtad
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Any option you give that smbtad doesn't understand will lead to print out it's list of processed commands. Such as if the user calls:

---------------------------------
smbtad --help
---------------------------------

The following output will appear:
-----------------------------------------------------------------
./smbtad: unrecognized option '--help'
ERROR: unkown option.

SMB Traffic Analyzer daemon

(C) 2008-2010 Holger Hetterich <ozzy@metal-district.de>	

-i	--inet-port		Specifiy the port to be used.	
				Default: 3490.			
-d      --debug-level		Specify the debug level (0-10).	
				Default: 0.			
-o	--interactive		Don't run as daemon.		
				(Runs as daemon by default)	
-c      --config-file		Use configuration file given.	
-q	--query-port		Specify the port to be used for 
				clients.			
-t --maintenance-timer <value>  specify the time intervall to
                                to start the database 
                                maintenance routine. Format is
                                HH:MM:SS
                                Example: -m 00:30:00 will run
                                the maintenance routine every
                                half hour.
                                Default: 01:00:00
-m --maintenance-timer-config 
     <value>   			specify a number of days
                                and a time. Every database
                                entry which is older than the
                                the specified number of days
                                will be deleted by the
                                maintenance routine.
                                Format is: DAYS, HH:MM:SS
                                Default: 1,00:00:00
------------------------------------------------------------------

-i --inet-port
++++++++++++++
Specifiy the internet socket port, that smbtad is using to listen for data from the VFS module. If the port number is not given, the Default setting 3490 will be used.

-d --debug-level
++++++++++++++++
Specify the debug level when running smbtad. If you get smbtad crashing and want to produce a bug report, please run it with -d 10, which is the highest debug level. The default value for this setting is 0, only fatal errors will be reported in this case. The debug messages smbtad is producing will be consumed by syslog and thus appear in your system log.

-o --interactive
++++++++++++++++
For debugging reasons, it can be useful to not run smbtad as a daemon program. When run with -o, smbtad will not become a daemon program. The default is to run in daemon mode.

-c --config-file
++++++++++++++++
The user can provide a configuration file instead of providing the command line switches.

-q --query-port
+++++++++++++++
This is the internet socket port to which clients can connect when those want to query the database, or request real time information. In case this parameter is not given, it is set to 3491 (or in other words to the value of --i --inet-port + 1.

-t --maintenance-timer
++++++++++++++++++++++
To hinder the database from growing infinite, a maintenance process is included in smbtad, which will clean up the database after a certain rule (see -m --maintenance-timer-config). The -t option specifies the interval in hours, as to then the maintenance process should be run. For example, if you give 00:10:00, a maintenance process will be started every ten minutes.

-m --maintenance-timer-config
+++++++++++++++++++++++++++++
Here you can specify how the maintenance process should work. The format is DAYS, HH:MM:SS. For example, if you want to delete anything in the database that is older than one day, you would give 1,00:00:00 (which is the default). Would you like to delete anything in the database that is older than 2 weeks, then you would give: 14,00:00:00 as parameter. Having deleted everything that is older than 2 hours, would be 0,02:00:00 as parameter.

Using a configuration file with smbtad
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

All the options mentioned in the paragraph before can be configured with a configuration file. The configuration file has the same format as ini-Files, known from the Windows platform. An example configuration file is included in the smbtad package, in the /dist directory. We will go through a complete configuration file in this chapter, descriping all the options. The configuration file is separated by chapters, such as "general" or "network". Line beginning with # are considered comments.


----------------------------------------------------------
/etc/smbtad.conf

# The general section defines options causing
# changes for the whole application
[general]
	# The debug level defines the verbosity in syslog
	# of smbtad. Values from 0 to 10 are supported, 0
	# being the normal mode, and 10 being totally verbose.
	# Note that debug level 10 is causing a speed penalty.
	# If you think you've found a bug, and try to reproduce it,
	# please run smbtad with debug_level = 10.
	debug_level = 0

[network]
	# The port_number option defines the internet socket port
	# to be used for listening for data from the VFS module.
	port_number = 3490
	# The query_port option defines the internet socket port
	# to be used for talking to clients such as smbtaquery or
	# smbtamonitor.
	query_port = 3491

[database]
	# Currently, smbtad is employing sqlite3 for it's database
	# tasks. A data file to be used (with full path) can be specified.
	sqlite_filename = /tmp/database.db

[maintenance]
	# To hinder the database from growing infinite, a maintenance process is
	# included in smbtad. The option "interval" is telling the intervall
	# as to when the maintenance procedure is run. For example, if you
	# give "00:10:00" as argument, a maintenance procedure will be run
	# any ten minutes.
	interval = 01:00:00

	# The config parameter defines how the maintenance process should work.
	# The format is DAYS, HH:MM:SS. For example, if you want to delete
	# anything in the database that is older than one day, you would
	# give 1,00:00:00 (which is the default). Would you like to delete
	# anything in the database that is older than 2 weeks, then you would
	# give: 14,00:00:00 as parameter. Having deleted everything that
	# is older than 2 hours, would be 0,02:00:00 as parameter.
	config = 01,00:00:00
----------------------------------------------------------------

Controlling smbtad through the rcsmbtad script
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The smbtad distribution includes LSB compliant start/stop scripts, as well
as to check the availability of the service. Provided you have a configuration
file setup for smbtad in /etc/smbtad.conf, the scripts will use this as the
configuration for smbtad. smbtad then can be started with:

-----------------------------------
rcsmbtad start
-----------------------------------

... stopped with:
-----------------------------------
rcsmbtad stop
-----------------------------------
... and checked for availability with:
-----------------------------------
rcsmbtad status
-----------------------------------

Checking the installation
~~~~~~~~~~~~~~~~~~~~~~~~~

When everything is set up, move some data on the shares you have activated
the VFS module on. For example, if you write a file to a share,
you can check the installation by looking into the database
directly, involving the sqlite3 command line interface:

---------------------------------
sqlite3 /var/lib/staddb
$ select * from write;
---------------------------------

You should now see entries of data written by the user you have done
the transfer with. If this works, your SMBTA installation works fine
und you can start pointing more shares to it.

Setting up Encryption
~~~~~~~~~~~~~~~~~~~~~

For security reasons, SMBTA can encrypt it's data flow from the module to the smbtad component. This is optional, data is not encrypted by default.

The encryption method used in SMBTA is 128bit AES. For this encryption, the user needs to generate a key and make the key known to both the Samba server where the VFS module is activated and the system smbtad is running on.

To ease the installation of encryption, the Samba server includes a small utility called smbta-util:

--------------------------
smbta-util -g keyfile
--------------------------

will generate a key for encryption, activate encryption on the Samba server, and save the key to a file. The user can then use this file on the smbtad system and store it in a protected place owned by the superuser.

--------------------------
smbta-util -u 
--------------------------

will uninstall the key from the Samba server, and deactivate encryption. To setup the key on the smbtad-system, you run smbtad with this command option:

------------------------------------
smbtad --keyfile=/etc/smbtad/key
------------------------------------

Using the client programs
-------------------------

smbtaquery
~~~~~~~~~~

The possibilities to create statistical data out of the data set are quite wide ranged. Instead of querying the database directly via SQL, users may use smbtaquery. It is specialized on the setup of the database,and runs a lot of preconfigured queries to produce statistical and informational data. smbtaquery is utilizing a simplified language to operate on the users whish, translates the commands into SQL, and connects to the smbtad program to run the SQL query. The result is then printed out.


General usage
^^^^^^^^^^^^^

Following is an example of a smbtaquery run:

---------------------------------
smbtaquery -h smbtahost.example.ex -i 3491 -q 'global, usage rw;'
---------------------------------

The command line option -h (or --host) is telling smbtaquery to use the given host as the system, where smbtad is running on. When running queries, it will connect to this system with the port number given with the command line option -i. 

Finally the command line option -q (or --query) provides the query to run for the build in interpreter of smbtaquery. More on this follows in the later chapters.

Utilizing a configuration file
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The command line options -h (--host) and -i are required every time smbtaquery should run a query on the database. Therefore, those parameters can be stored into a configuration file, which will automatically be loaded and parsed if it is found. The location of this file is:

---------------------------------
$HOME/.smbtatools/query-config
---------------------------------
whereas $HOME is the users home directory.

The format of the file is that of a ini file:

-------------------------------
[network]
	hostname = smbtahost.example.ex
	port = 3491
-------------------------------

The smbtaquery interpreter
^^^^^^^^^^^^^^^^^^^^^^^^^^

To ease the usage of the database, smbtaquery implements a simplified language to query the database. It is specialized for SMBTA.

Syntax
++++++

Every command is seperated by a comma, any paraeters to the command are seperated by space. The last command ends with a semicolon instead of a comma.

Here is an example query:

--------------------------
'global, usage rw;'
--------------------------

The objects
+++++++++++

Any functions called by smbtaquery are in relation to an object which is named first. An object can be a file, a share, or a username, or global, which does not relate to a specific object.

For example if you make a query like this:
------------------------------------
'share Fritzboxtest, usage rw'
------------------------------------

The calling of the function "usage rw" (as being introduced later in this chapter) is bound to the share "Fritzboxtest". Any results will be related to this share. The general syntax is first to name the object, and then to run the functions on. At any time, you can name a new object, and any function run after the new object definition will be run related to this object.

Say "total r" is a function to get the total number of bytes read by an object.
A query could then be:
-----------------------------------
'user holger, total r;'
-----------------------------------

This call would print the total number of bytes read by the user holger.

The following query:
------------------------------------
'share Fritzboxtest, total rw, user holger total w;'
------------------------------------

Would first print out the total number of bytes (written and read) on share "Fritzboxtest", and then the total number of bytes written by user holger.

The following object definitions are currently possible:
--------------------------------------------
'share $SHARE' a Samba file service (a share)
'user $USER' a User
'file $FILE' a specific file
'global' Global.
--------------------------------------------

The "global" parameter is special in the way it treats the following functions. Functions running on global are not limited by anything, and always work on the full database. Giving the following query:

---------------------------------
'global, total rw;'
---------------------------------

Would print out the full sum of bytes ever transferred (be it read or write).

Time Modifiers
++++++++++++++

Any functions that are called on objects can make use of time modifiers, that allow to specifiy a time range the function shall work on. The supported keywords must be used on objects and are called: *FROM - TO* and *SINCE*.

.Example for FROM-TO:
==================================
'global from 10-10-2010 to today, total rw;'
==================================

.Example for SINCE:
==================================
'user holger since yesterday, total rw;'
==================================

Allowed keywords for time specification are:
$DATE-$TIME in the fowolling format:
*MM-DD-YYYY HH:MM:SS*

Also, there are the following keywords making the time specification easier:
*yesterday*, *today* and *now*.




Object Identification
^^^^^^^^^^^^^^^^^^^^^
SMBTA will try to identify the objects that given by searching through it's database. For example, the user "holger" could exist more than once. User "holger" could be coming from two or more domains, each of these listing user "holger" with a different SID. Therefore SMBTA will look up the known SIDs of user "holger" and will present a dialog to choose the right user in case more than one user "holger" exists. As a consequence, shares are checked for domains, and files are checked for the share and the domain.

The functions
^^^^^^^^^^^^^

total
+++++

Syntax:
*total [RW] [R] [W]*

The total function prints out the sum of bytes transferred by an object.

"total r" will compute the sum of bytes read.
"total w" will compute the sum of bytes written.
"total rw" will compute the sum of bytes transferred (read and write access).

.Total function example:
====================================
Print out the number of bytes written on the share "Fritzboxtest":
---------------------------------
'share Fritzboxtest, total w;'
---------------------------------
====================================


list
++++
Syntax:
*list [users] [files]*

The list function prints a list of objects related to the given object.

"list users" will print out the list of known users working or involved
with the object.
"list files" will print out the list of known files involved with the object.

.List function example:
===================================
Prints out all users who ever touched, read or written to file "README":
--------------------------------
'file README, list users;'
--------------------------------

Print out the list of known files on share "Fritzboxtest":
--------------------------------
'share Fritzboxtest, list files;'
--------------------------------
===================================

top
+++

Syntax:
*top [number] [files] [users] [shares] [rw] [r] [w]*

The top function prints out a number of top files, users, or shares by
read, write or read and write access.

.Top function example:
==================================
Print out the 10 most used files on share "Fritzboxtest" by read access:
--------------------------------
'share Fritzboxtest, top 10 files r;'
--------------------------------

Print out the 10 most used shares on the Samba network:
--------------------------------
'global, top 10 shares rw;'
--------------------------------
==================================


last_activity
+++++++++++++

Syntax:
*last_activity [number]*

The last_activity function prints out a list of actions an object has been
involved in. 

.last_activity Function example:
====================================
Print out the last 10 actions of user holger:
-----------------------------------
'user holger, last_activity 10;'
-----------------------------------

Print out the last 10 actions where file "README" has been involved in:
-----------------------------------
'file README, last_activity 10;'
-----------------------------------
====================================

usage
+++++

Syntax:
*usage [rw] [r] [w]*

The usage function sums up the usage or activity of an object by creating
a virtual day, listing 24 hours and showing the data acitvity by percentage.

.usage Function example:
========================================
Print a graph of the total usage of the Samba network:
---------------------------------
'global, usage rw;'
---------------------------------

Print a graph of the usage of share "Fritzboxtest" by read-access:
---------------------------------
'share Fritzboxtest, usage r;'
---------------------------------
=========================================

smbtamonitor
~~~~~~~~~~~~

smbtamonitor allows to view Samba traffic in real-time. The program connects directly to smbtad via the network. To allow real-time, a special feature in smbtad has been implemented. Instead of receiving data from the SQL storage, smbtad filters and sends directly to smbtamonitor when receiving a data package from a vfs_smb_traffic_analyzer VFS module. The smbtamonitor program is listening on the smbtad socket for news, and visualizes them in an curses window.

This concept allows for interesting options, such as computing the throughput of an object within smbtad. The queries smbtamonitor is doing are called "monitors" by the authors. A "monitor" is like a dynamically loaded module in smbtad, requested by smbtamonitor, and doing some computing on the numbers.

For example you can watch the total number of transferred bytes and the throughput per second of an object by running smbtamonitor.

Any smbtamonitor instance is bound to an object ( a user, a file, or a share). You can run as many smbtamonitor instances as you want against smbtad.

Utilizing a configuration file
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The command line options -h (--host) and -i are required every time smbtamonitor should run. Therefore, those parameters can be stored into a configuration file, which will automatically be loaded and parsed if it is found. The location of this file is:
----------------------------------------
$HOME/.smbtatools/monitor-config
----------------------------------------
whereas $HOME is the users home directory.

The format of the file is that of a ini file:
----------------------------------------
[network]
        hostname = smbtahost.example.ex
        port = 3491
----------------------------------------

smbtamonitor startup
^^^^^^^^^^^^^^^^^^^^

To start a monitor, use the same arguments for the host and internet port to connect to as with smbtaquery:
------------------------------------------
smbtamonitor -h examplehost.de.ex -i 3491 --share "Distribution Space"
------------------------------------------
This command will start a real time monitor that will display information about the share named "Distribution Space". Likewise, it's possible to run:

-----------------------------------------
smbtamonitor -h examplehost.de.ex -i 3491 --user holger
-----------------------------------------

which will run a monitor displaying information about the user holger, and:

-----------------------------------------
smbtamonitor -h examplehost.de.ex -i 3491 --file README
-----------------------------------------

will run a monitor displaying real time information about the file named
"README".

After identification of the given object, like already mentioned in the smbtaquery chapter, the monitor will initialize the curses library for it's display. smbtamonitor runs 80x25 display size fixed at the moment. 

The smbtamonitor screen is the same for any object given. In the upper half of the screen the user will be presented the total sum of transferred bytes by the given object, sorted by read-only requests, write-only and both of them.

Then the data throughput per second is displayed, this number should change quickly when something is transferred involving the given object. The throughput is also sorted by read-only, write-only and both of them.

The lower half of the screen represents a real-time human readable text log of what happens with the given object. For example copying a simple file on a share should show that the file was opened, written to, and then closed.


Reporting Problems, bugs, contacting the Authors
------------------------------------------------

To find the latest news and versions of SMBTA, check out it's homepage:

-------------------------------------------------
http://holger123.wordpress.com/smb-traffic-analyzer/
-------------------------------------------------

If you can reproduce an error situation, do not hestitate to open a bug on http://bugzilla.novell.com, set "Samba" as component, and begin the Bug subject with [SMBTA]. 

If you have problems that might not be as easy to reproduce, or need help in doing this, longer stories, or even a word of "Hey SMBTA is cool, thank you!", please send mail to Holger Hetterich <ozzy@metal-district.de>.

Project outlook and version history
-----------------------------------

smbtad
~~~~~~

Version 1.0
^^^^^^^^^^^

Version 1.0
The initial version:
- full documentation (mainly this guide) on smbtad and the smbtatools.
- Binary packages for distributions

Version 2.0
^^^^^^^^^^^
- encryption support smbtad <-> smbtatools
- support clustered Samba

smbtatools
~~~~~~~~~~

Version 1.0
^^^^^^^^^^^

Version 1.0
The initial version:
- full documentation (mainly this guide) on the tools.
- binary packages

Version 2.0
^^^^^^^^^^^
- encryption support smbtad <-> smbtatools
- XML output support for smbtaquery
- support clustered Samba

